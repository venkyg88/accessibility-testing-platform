version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: a11y-scanner-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: a11y_scanner
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./apps/backend/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    container_name: a11y-scanner-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://postgres:password@postgres:5432/a11y_scanner?schema=public
      PORT: 4000
      NODE_ENV: production
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./apps/backend/uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Dashboard (optional for production)
  web-dashboard:
    build:
      context: .
      dockerfile: apps/web-dashboard/Dockerfile
    container_name: a11y-scanner-web
    restart: unless-stopped
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:4000/api
    ports:
      - "3000:3000"
    depends_on:
      - backend

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: a11y-scanner-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: a11y-scanner-network